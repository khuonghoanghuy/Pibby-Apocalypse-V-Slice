import funkin.play.PlayState;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;

class FixAnimHoldNote extends Module{
    var game:PlayState;
    //var 
    var songStarted:Bool = false;

    function onSongStart(event){
        songStarted = true;
    }

    override function onStepHit(event){
        game = PlayState.instance;
        if (game == null) return;
        if (songStarted == false) return;
        super.onStepHit(event);

        for (holdNote in game.opponentStrumline.holdNotes.members)
        {
            if (holdNote == null || !holdNote.alive) continue;

            // While the hold note is being hit, and there is length on the hold note...
            if (holdNote.hitNote && !holdNote.missedNote && holdNote.sustainLength > 0)
            {
                // Make sure the opponent keeps singing while the note is held.
                if (game.currentStage != null && game.currentStage.getDad() != null && game.currentStage.getDad().isSinging())
                {
                    game.currentStage.getDad().holdTimer = 0;
                    onSustainNote(true, holdNote.noteData.kind, holdNote.noteData);
                }

                if (game.currentStage != null && game.currentStage.getGirlfriend() != null)
                {
                    game.currentStage.getGirlfriend().holdTimer = 0;
                    onSustainNote(true, holdNote.noteData.kind, holdNote.noteData);
                }
            }
        }

        for (holdNote in game.playerStrumline.holdNotes.members)
        {
            if (holdNote == null || !holdNote.alive) continue;

            // While the hold note is being hit, and there is length on the hold note...
            if (holdNote.hitNote && !holdNote.missedNote && holdNote.sustainLength > 0)
            {
                // Make sure the opponent keeps singing while the note is held.
                if (game.currentStage != null && game.currentStage.getBoyfriend() != null && game.currentStage.getBoyfriend().isSinging())
                {
                    game.currentStage.getDad().holdTimer = 0;
                    onSustainNote(false, holdNote.noteData.kind, holdNote.noteData);
                }

                if (game.currentStage != null && game.currentStage.getGirlfriend() != null)
                {
                    game.currentStage.getGirlfriend().holdTimer = 0;
                    onSustainNote(false, holdNote.noteData.kind, holdNote.noteData);
                }
            }
        }
    }

    function onNoteHit(e:Dynamic)
    {
        game = PlayState.instance;
        super.onNoteHit(e);

        if (game == null) return;
    }

    function onSustainNote(isOpponent, type, holdNoteData){
        var direction = holdNoteData.getDirection();
        
        if (isOpponent){
            if (type == null || type == 'Glitch Note'){
                game.currentStage.getDad().playSingAnimation(direction, false);
            }

            if (type == 'GF Sing'){
                game.currentStage.getGirlfriend().playSingAnimation(direction, false);
            }
        }

        if (!isOpponent){
            if (type == null){
                game.currentStage.getBoyfriend().playSingAnimation(direction, false);
            }

            if (type == 'GF Sing'){
                game.currentStage.getGirlfriend().playSingAnimation(direction, false);
            }
        }

        ModuleHandler.getModule('GlitchCharacters').scriptCall('onSustainNote', [isOpponent, type, holdNoteData]);
    }
}